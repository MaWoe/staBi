{"version":3,"sources":["EnhancedTableHead.js","DataSource.js","SortableTable.js","index.js","config.live.js"],"names":["EnhancedTableHead","createSortHandler","property","event","_this","props","onRequestSort","_this2","this","_this$props","onSelectAllClick","direction","orderBy","numSelected","rowCount","columnConfig","react_default","a","createElement","TableHead_default","TableRow_default","TableCell_default","padding","Checkbox_default","indeterminate","checked","onChange","map","column","key","id","numeric","disablePadding","sortDirection","Tooltip_default","title","placement","enterDelay","TableSortLabel_default","active","onClick","label","React","Component","DataSource","url","Object","classCallCheck","load","onLoad","getData","data","sort","length","slice","itemA","itemB","returnForItemASmaller","fetch","then","response","json","console","log","SortableTable","state","selected","Map","page","rowsPerPage","overallCount","handleRequestSort","reloadData","newOrderBy","newDirection","_this$state","setState","dataSource","handleClick","has","delete","set","handleSelectAllClick","target","n","_this$state2","Paper_default","className","classes","root","Table_default","table","src_EnhancedTableHead","size","TableBody_default","row","isSelected","hover","role","aria-checked","tabIndex","component","scope","to","account","withStyles","theme","width","marginTop","spacing","unit","overflowX","minWidth","document","location","hostname","window","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","ReactDOM","render","src_SortableTable","querySelector"],"mappings":"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","file":"static/js/main.2053d539.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nclass EnhancedTableHead extends React.Component {\n    createSortHandler = property => event => {\n        this.props.onRequestSort(event, property);\n    };\n\n    render() {\n        const { onSelectAllClick, direction, orderBy, numSelected, rowCount, columnConfig } = this.props;\n\n        return (\n            <TableHead>\n                <TableRow>\n                    <TableCell padding=\"checkbox\">\n                        <Checkbox\n                            indeterminate={numSelected > 0 && numSelected < rowCount}\n                            checked={numSelected === rowCount}\n                            onChange={onSelectAllClick}\n                        />\n                    </TableCell>\n                    {columnConfig.map(column => {\n                        return (\n                            <TableCell\n                                key={column.id}\n                                numeric={column.numeric}\n                                padding={column.disablePadding ? 'none' : 'default'}\n                                sortDirection={orderBy === column.id ? direction : false}\n                            >\n                                <Tooltip\n                                    title=\"Sort\"\n                                    placement={column.numeric ? 'bottom-end' : 'bottom-start'}\n                                    enterDelay={300}\n                                >\n                                    <TableSortLabel\n                                        active={orderBy === column.id}\n                                        direction={direction}\n                                        onClick={this.createSortHandler(column.id)}\n                                    >\n                                        {column.label}\n                                    </TableSortLabel>\n                                </Tooltip>\n                            </TableCell>\n                        );\n                    }, this)}\n                </TableRow>\n            </TableHead>\n        );\n    }\n}\n\nEnhancedTableHead.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    direction: PropTypes.string.isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n    columnConfig: PropTypes.array.isRequired\n};\n\nexport default EnhancedTableHead;","class DataSource {\n\n    /**\n     * @type {Array}\n     */\n    data;\n\n    /**\n     * @type {string}\n     */\n    url;\n\n    /**\n     * @param {string} url\n     */\n    constructor(url) {\n        this.url = url;\n    }\n\n    /**\n     * @param {string} orderBy\n     * @param {string} direction\n     * @param {Function} onLoad\n     */\n    load = (orderBy, direction, onLoad) => {\n        this.getData(\n            /**\n             * @param {Array} data\n             */\n            (data) => onLoad(this.sort(data, orderBy, direction), data.length)\n        );\n\n    };\n\n    /**\n     * @param {Array} data\n     * @param {string} orderBy\n     * @param {string} direction\n     */\n    sort = (data, orderBy, direction) => {\n        let dataCopy = data.slice();\n        return dataCopy.sort(\n            (itemA, itemB) => {\n                const returnForItemASmaller = direction === 'asc' ? 1 : -1;\n                return itemA[orderBy] < itemB[orderBy] ? returnForItemASmaller : -1 * returnForItemASmaller;\n            }\n        )\n    };\n\n    /**\n     * @param {Function} onLoad\n     */\n    getData = (onLoad) => {\n        if (this.data) {\n            onLoad(this.data);\n        } else {\n            fetch(this.url)\n                .then(response => response.json())\n                .then(\n                    json => {\n                        console.log('Received data:', json);\n                        this.data = json;\n                        onLoad(this.data);\n                    }\n                )\n        }\n    }\n}\n\nexport default DataSource;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport EnhancedTableHead from './EnhancedTableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport DataSource from './DataSource';\n\nconst styles = theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing.unit * 3,\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 300,\n    },\n});\n\nclass SortableTable extends React.Component {\n\n    state = {\n        direction: 'asc',\n        orderBy: 'title',\n        selected: new Map(),\n        data: [],\n        page: 0,\n        rowsPerPage: 5,\n        overallCount: 0\n    };\n\n    componentDidMount() {\n        this.reloadData();\n    }\n\n    handleRequestSort = (event, property) => {\n        const orderBy = property;\n        let direction = 'desc';\n\n\n        if (this.state.orderBy === property && this.state.direction === 'desc') {\n            direction = 'asc';\n        }\n\n        this.reloadData(orderBy, direction);\n    };\n\n    reloadData = (newOrderBy, newDirection) => {\n        let { orderBy, direction} = this.state;\n\n        orderBy = newOrderBy || orderBy;\n        direction = newDirection || direction;\n\n        this.setState({ orderBy, direction});\n\n        this.props.dataSource.load(orderBy, direction, (data, overallCount) => {\n            this.setState({data, overallCount});\n        });\n\n    };\n\n    handleClick = (event, id) => {\n        const { selected } = this.state;\n        if (selected.has(id)) {\n            selected.delete(id);\n        } else {\n            selected.set(id, true);\n        }\n        this.setState({ selected });\n    };\n\n    handleSelectAllClick = event => {\n        let selected = new Map();\n\n        if (event.target.checked) {\n            this.state.data.map(n =>\n                selected.set(n.id, true)\n            );\n        }\n\n        console.log(\"Selected:\", selected);\n\n        this.setState({ selected });\n    };\n\n    render() {\n        const { data, orderBy, direction, selected, overallCount } = this.state;\n        // const { rowsPerPage, page } = this.state;\n        // const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n        return (\n            <Paper className={this.props.classes.root}>\n                <Table className={this.props.classes.table}>\n                    <EnhancedTableHead\n                        numSelected={selected.size}\n                        direction={direction}\n                        orderBy={orderBy}\n                        onSelectAllClick={this.handleSelectAllClick}\n                        onRequestSort={this.handleRequestSort}\n                        rowCount={overallCount}\n                        columnConfig={this.props.columnConfig}\n                    />\n                    <TableBody>\n                        {data.map(\n                            row => {\n                                const isSelected = selected.has(row.id);\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        onClick={event => this.handleClick(event, row.id)}\n                                        role=\"checkbox\"\n                                        aria-checked={isSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox checked={isSelected} />\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.title}\n                                        </TableCell>\n                                        <TableCell>{row.to}</TableCell>\n                                        <TableCell>{row.account}</TableCell>\n                                    </TableRow>\n                                );\n                            }\n                        )}\n                    </TableBody>\n                </Table>\n            </Paper>\n        );\n    }\n}\n\nSortableTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n    dataSource: PropTypes.instanceOf(DataSource),\n    columnConfig: PropTypes.array.isRequired\n};\n\nexport default withStyles(styles)(SortableTable);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SortableTable from './SortableTable';\nimport DataSource from './DataSource';\n//import config from './config.dev';\nimport config from './config.live';\n\nconst dataSource = new DataSource(config.url);\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\n\nconst columnConfig = [\n    { id: 'title', numeric: false, disablePadding: false, label: 'Titel' },\n    { id: 'to', numeric: false, disablePadding: false, label: 'Frist' },\n    { id: 'account', numeric: false, disablePadding: false, label: 'Konto' },\n];\n\n\nReactDOM.render(<SortableTable dataSource={dataSource} columnConfig={columnConfig}/>, document.querySelector('#root'));","export default {\n    url: 'http://' + document.location.hostname + ':80/data.php'\n}"],"sourceRoot":""}